"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PluginMiddleware = void 0;
const http_1 = require("http");
require("../lib/structures/http/HttpCodes");
const Middleware_1 = require("../lib/structures/Middleware");
class PluginMiddleware extends Middleware_1.Middleware {
    constructor(context) {
        super(context, { position: 10 });
        Object.defineProperty(this, "origin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "methods", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: http_1.METHODS.join(', ')
        });
        this.origin = this.container.server.options.origin ?? '*';
    }
    run(request, response, route) {
        response.setHeader('Date', new Date().toUTCString());
        response.setHeader('Access-Control-Allow-Credentials', 'true');
        response.setHeader('Access-Control-Allow-Origin', this.origin);
        response.setHeader('Access-Control-Allow-Headers', 'Authorization, User-Agent, Content-Type');
        response.setHeader('Access-Control-Allow-Methods', this.methods);
        this.ensurePotentialEarlyExit(request, response, route);
    }
    /**
     * **RFC 7231 4.3.7.**
     * > This method allows a client to determine the options and/or requirements associated with a
     * > resource, or the capabilities of a server, without implying a resource action.
     *
     * This method ensures that the request is exited early in case required
     * The conditions in which an early exit is required are:
     * 1. If the request method is 'OPTIONS'. In this case the request is returned with status code 200
     * 2. If the requested route isn't matched with any existing route in the RouteStore.
     * In this case the request is returned with a status code 404.
     *
     * @param request The API Request coming in
     * @param response The API response that will go out
     * @param route The route being requested by the request
     */
    ensurePotentialEarlyExit(request, response, route) {
        if (request.method === 'OPTIONS') {
            response.end();
        }
        else if (route === null) {
            response.status(404 /* NotFound */).end();
        }
    }
}
exports.PluginMiddleware = PluginMiddleware;
//# sourceMappingURL=headers.js.map