import type { ApiRequest } from './ApiRequest';
import type { ApiResponse } from './ApiResponse';
export declare class CookieStore extends Map<string, string> {
    protected request: ApiRequest;
    protected response: ApiResponse;
    private domain;
    private secure;
    constructor(request: ApiRequest, response: ApiResponse, secure: boolean, domainOverwrite?: string | null);
    add(name: string, value: string, options?: SecureCookieStoreSetOptions): void;
    remove(name: string): void;
    protected insert(name: string, entry: string): void;
    protected prepare(name: string, value: string, { expires, maxAge, domain, path, httpOnly }?: SecureCookieStoreSetOptions): string;
    /**
     * Parses a host using the {@linkplain https://github.com/lupomontero/psl psl} library to extract the domain.
     * This is used for the domain of the cookie
     * @param host The hot to parse
     * @returns Either the host in all lower case or the parsed domain, ready for use on cookies
     */
    private getHostDomain;
    private static readonly octetRegExp;
    private static encodeCookieOctet;
}
export interface SecureCookieStoreSetOptions {
    expires?: Date;
    maxAge?: number;
    domain?: string;
    path?: string;
    httpOnly?: boolean;
}
//# sourceMappingURL=CookieStore.d.ts.map